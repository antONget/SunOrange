import logging

from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.state import State, StatesGroup

from database import requests as rq
from config_data.config import Config, load_config
from utils.error_handling import error_handler
from utils.send_phone_contact import request_contact, get_phone_user
from utils.utils_keybords import utils_handler_pagination_and_select_item
from services.integration_u_on import method_get_countries, method_get_company_office, method_post_lead
from filter.filter import validate_date_birthday
from keyboards.start_keyboard import keyboard_hotel_types, keyboard_nutrition

config: Config = load_config()
router = Router()
router.message.filter(F.chat.type == "private")


class StateOrder(StatesGroup):
    fullname_state = State()
    country_state = State()
    city_state = State()
    data_department_state = State()
    count_night_state = State()
    count_tourist_state = State()
    age_kids_state = State()
    budget_state = State()
    phone_state = State()
    office_state = State()


@router.message(CommandStart())
@error_handler
async def start(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info('start')
    tg_id = message.chat.id
    await state.set_state(state=None)
    await state.clear()
    if message.from_user.username:
        username = message.from_user.username
    else:
        username = "–ù–∏–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    data = {"tg_id": tg_id, "username": username}
    await rq.add_user(tg_id=tg_id, data=data)
    await message.answer(text='–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?')
    await state.set_state(StateOrder.fullname_state)


@router.message(F.text, StateFilter(StateOrder.fullname_state))
@error_handler
async def get_fullname(message: Message, state: FSMContext, bot: Bot):
    logging.info('get_fullname')
    fullname = message.text
    await state.update_data(fullname=fullname)
    await message.answer(text=f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è, {fullname}. –í –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω—É –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è?')
    await state.set_state(StateOrder.country_state)


@router.message(F.text, StateFilter(StateOrder.country_state))
@error_handler
async def get_country(message: Message, state: FSMContext, bot: Bot):
    logging.info('get_country')
    country_input = message.text
    list_countries: list = await method_get_countries()
    for i, country in list_countries:
        if country == country_input:
            await message.answer(text=f'–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä! –ö–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤ —Å—Ç—Ä–∞–Ω–µ <b>{country}</b> –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è?')
            await state.set_state(StateOrder.city_state)
            await state.update_data(countries=country)
            await state.update_data(country_id=i)
            break
    else:
        await message.answer(text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ <b>{country_input}</b> –º—ã —Ç—É—Ä—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º. –£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É')


@router.message(F.text, StateFilter(StateOrder.city_state))
@error_handler
async def get_city(message: Message, state: FSMContext, bot: Bot):
    logging.info('get_city')
    city_input = message.text
    await state.update_data(city=city_input)
    await message.answer(text=f'–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞. –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –¥–¥-–º–º-–≥–≥–≥–≥')
    await state.set_state(StateOrder.data_department_state)


@router.message(F.text, StateFilter(StateOrder.data_department_state))
@error_handler
async def get_data_department(message: Message, state: FSMContext, bot: Bot):
    logging.info('get_data_department')
    data_department_input = message.text
    data_department_ = f'{data_department_input.split("-")[-1]}-{data_department_input.split("-")[1]}-{data_department_input.split("-")[0]}'
    await state.update_data(data_department=data_department_)
    if validate_date_birthday(data_department_input):
        hotel_types_list = ['1*', '2*', '3*', '4*', '5*', '5+*', 'Apts', 'Villa']
        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–µ–ª—è',
                             reply_markup=keyboard_hotel_types(hotel_types=hotel_types_list))
    else:
        await message.answer(text=f'–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –¥–¥-–º–º-–≥–≥–≥–≥')


@router.callback_query(F.data.startswith('hotel'))
@error_handler
async def get_hotel_types(callback: CallbackQuery, state: FSMContext, bot: Bot):
    logging.info('get_hotel_types')
    hotel_types = callback.data.split('_')[-1]
    await state.update_data(hotel_types=hotel_types)
    nutrition_list = ['RO', 'BB', 'HB', 'HB+', 'FB', 'FB+', 'AI', 'UAI']
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–µ–ª—è',
                                     reply_markup=keyboard_nutrition(nutritions=nutrition_list))


@router.callback_query(F.data.startswith('nutrition'))
@error_handler
async def get_hotel_types(callback: CallbackQuery, state: FSMContext, bot: Bot):
    logging.info('get_hotel_types')
    nutrition = callback.data.split('_')[-1]
    await state.update_data(nutrition=nutrition)
    await callback.message.edit_text(text='–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π')
    await state.set_state(StateOrder.count_night_state)


@router.message(F.text, StateFilter(StateOrder.count_night_state))
@error_handler
async def get_count_night(message: Message, state: FSMContext, bot: Bot):
    logging.info('get_count_night')
    count_night_input = message.text
    await state.update_data(count_night=count_night_input)
    if count_night_input.isdigit() and int(count_night_input) > 0:
        await message.answer(text='–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–∏—Å—Ç–æ–≤')
        await state.set_state(StateOrder.count_tourist_state)
    else:
        await message.answer(text=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')


@router.message(F.text, StateFilter(StateOrder.count_tourist_state))
@error_handler
async def get_count_tourist(message: Message, state: FSMContext, bot: Bot):
    logging.info('get_count_tourist')
    count_tourist_input = message.text
    await state.update_data(count_tourist=count_tourist_input)
    if count_tourist_input.isdigit() and int(count_tourist_input) > 0:
        await message.answer(text='–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π')
        await state.set_state(StateOrder.age_kids_state)
    else:
        await message.answer(text=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–∏—Å—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ,'
                                  f' –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')


@router.message(F.text, StateFilter(StateOrder.age_kids_state))
@error_handler
async def get_age_kids(message: Message, state: FSMContext, bot: Bot):
    logging.info('get_age_kids')
    age_kids_input = message.text
    await state.update_data(age_kids=age_kids_input)
    if age_kids_input.isdigit() and int(age_kids_input) >= 0:
        await message.answer(text='–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç')
        await state.set_state(StateOrder.budget_state)
    else:
        await message.answer(text=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π —É–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')


@router.message(F.text, StateFilter(StateOrder.budget_state))
@error_handler
async def get_data_budget(message: Message, state: FSMContext, bot: Bot):
    logging.info('get_data_budget')
    budget_input = message.text
    await state.update_data(budget=budget_input)
    if budget_input.isdigit() and int(budget_input) > 0:
        await request_contact(message=message, state=state, bot=bot)
        await state.set_state(StateOrder.phone_state)
    else:
        await message.answer(text=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π —É–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')


@router.message(StateFilter(StateOrder.phone_state))
@error_handler
async def get_phone_state(message: Message, state: FSMContext, bot: Bot):
    logging.info('get_phone_state')
    phone_input = await get_phone_user(message=message, state=state, bot=bot)
    if phone_input:
        await message.answer(text='üì£',
                             reply_markup=ReplyKeyboardRemove())
        await state.update_data(phone=phone_input)
        list_office = await method_get_company_office()
        await utils_handler_pagination_and_select_item(list_items=list_office,
                                                       text_message_pagination='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ–∏—Å:',
                                                       page=0,
                                                       count_item_page=6,
                                                       callback_prefix_select='office_select',
                                                       callback_prefix_back='office_back',
                                                       callback_prefix_next='office_next',
                                                       message=message,
                                                       callback=None)


@router.callback_query(F.data.startswith('office'))
async def process_office(callback: CallbackQuery, state: FSMContext, bot: Bot):
    logging.info('process_office')
    page = int(callback.data.split('_')[-1])
    action = callback.data.split('_')[1]
    if action in ['back', 'next']:
        list_office = await method_get_company_office()
        await utils_handler_pagination_and_select_item(list_items=list_office,
                                                       text_message_pagination='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ–∏—Å:',
                                                       page=page,
                                                       count_item_page=6,
                                                       callback_prefix_select='office_select',
                                                       callback_prefix_back='office_back',
                                                       callback_prefix_next='office_next',
                                                       message=None,
                                                       callback=callback)
    else:
        await callback.message.edit_text(text='–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏'
                                              ' —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–µ –¥–µ—Ç–∞–ª–µ–π')
        data = await state.get_data()
        id_office = int(callback.data.split('_')[-1])
        format_dict_ = {
            "u_telegram": f'{callback.from_user.username}/{callback.from_user.id}',
            "source": 'tg_bot',
            "u_name": data['fullname'],
            "countries": int(data['country_id']),
            "note": data['city'],
            "data_department": data['data_department'],
            "hotel_types": data['hotel_types'],
            "nutrition": data['nutrition'],
            "nights_to": data['count_night'],
            "tourist_count": data['count_tourist'],
            "tourist_child_count": data['age_kids'],
            "budget": int(data['budget']),
            "u_phone_mobile": data['phone'],
            "r_co_id": id_office
        }
        await method_post_lead(format_dict=format_dict_)
        format_dict_ = {
            "tg_id": callback.from_user.id,
            "fullname": data['fullname'],
            "countries": data['countries'],
            "city": data['city'],
            "data_department": data['data_department'],
            "hotel_types": data['hotel_types'],
            "nutrition": data['nutrition'],
            "nights_to": data['count_night'],
            "tourist_count": data['count_tourist'],
            "tourist_child_count": data['age_kids'],
            "budget": data['budget'],
            "u_phone_mobile": data['phone']
        }
        await rq.add_order(data=format_dict_)